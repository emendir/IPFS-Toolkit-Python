This is a Python module that enables two users to easily transmit data of any length to each other over the IPFS Network.
See ReadMe.txt for instructions on how to install all the software tools needed to use it.

This module has two functions for use by the user:
- TransmitData(data, peerID, listener_name)
- ListenForTransmissions(listener_name, eventhandler)

The listener function (ListenForTransmissions) runs on its own thread, and whenever it finishes receiving a transmission it calls the function specified in its eventhandler parameter, passing it the received data and the IPFS peer ID of the computer who sent the data.
To achieve the greatest flexibility, each process for receiving a transmission also runs on a separate thread that spawns off ListenForTransmissions' main thread, allowing for new transmissions to be received while other transmissions are still in the process of being received.
To allow multiple instances of ListenForTransmissions to run in parallel, for example one for each of several different applications running on the same computer, those different listeners (instances of ListenForTransmissions) must me named to distinguish them from each other. This name is the "listener_name" parameter in ListenForTransmissions() and TransmitData(). The name is chosen by the user when creating the listener (when calling ListenForTransmissions()), and must be provided when starting a transmission (when calling TransmitData()).So overview: multiple listeners can run on the same computer for different applications; to specify which listener to transmit data to, the IPFS peer ID of the computer and the name of the listener on the computer must be specified.


IPFS Technicalities:
How does this module use IPFS to to send data to another computer? After all, IPFS is a file system and made for sharing and storing files, creating a content addressed internet. Does it really provide the functionality for two computers to communicate directly which each other?
Yes, IPFS does provide that functionality, although as of December 2020 that is still an experimental feature. That's why you have to configure IPFS to enable that feature as described in ReadMe.txt.
After all, IPFS relies on peers sending data to each other over its decentralised network. That network which IPFS is built on top of is called libp2p. This module essentially uses the libp2p module inside of the IPFS process running on the computer to communicate to other computers via an access point to the module which IPFS provides, the experimental feature which IPFS calls Libp2pStreamMounting. Libp2pStreamMounting works by allowing the user to set up a port forwarding system on the computer between the user's program and the libp2p process inside of IPFS. After setting up this port forwarding the user can communicate to the port on their computer, and libp2p forwards that communication to the libp2p module runnning inside of IPFS on the other computer, which forwards it in turn to a preconfigured port on that computer, to be listened to by the user. As of yet IPFS only provides this functionality for TCP ports, and not UDP, which I personally find annoying because I work better with UDP. This IPFS_DataTransmission is based on a data transmission system I built for UDP, and this TCP version of it is extremely slow and not as reliable.
Because the python api for interacting with IPFS (ipfshttpclient) doesn't yet support this experimental feature, I had to extend the module myself, the result of which is the ipfshttpclient2 folder in this code project.
